# 控制器数据驱动的使用

合理使用表驱动方式的优点：

1.业务复杂时，过多的if else或者switch会影响可读性和可维护性，维护一张表复杂程度远小于维护大量的逻辑判断；

2.业务逻辑能够抽取到viewmodel独立实现，避免臃肿viewcontroller；

3.数据驱动一切，让代码逻辑更加清晰。
拿tableview举例：业务涉及很多不同类型的cell和状态，在cellForRow方法中，如果用传统的ifelse和switch，会导致里面的判断对应性很差，写的时间容易出错，维护的时候看起来也费劲。拿股票业务举例，第一部分需要显示图表走势图，第二部分显示banner，第三部分显示关键参数指标，第四部分显示新闻，其中新闻需要区分各种不同类型不同高度自适应的cell；第五部分需要显示footer内容，如各种tips提示语或图片。有时候也需要在最前面插入一些通知提示在header，算是第0部分。一共五个部分，各部分还各有不同的cell类型显示，传统的ifelse代码太难看了，稍微有些经验的猿就一看就知道必须要优化。

优化思路是要想办法把这些判断变成一张表的形式，使用字典的形式就很合适，清晰易用，再多cell也就是一个大一些的字典而已。使用元组的形式将数据驱动需要提供的信息封装起来：cellid，cell高度，viewModel，点击实现的block，主要是这四个要素的内容。其他三个内容好理解，viewModel的内容需要解释一下。所有在cell中会用到的数据结构，都统一在viemodel里面提供，可以在网络返回解析好的model基础上，针对业务进一步处理成viewModel，熟悉mvvm结构的伙伴应该很熟悉这个概念。数据驱动优化完之后，cell要做的事情就是初始化ui，数据来了，使用处理好的viewModel refresh UI；vc要做的事情是初始化好表，从网络或者其他本地渠道获取数据，更新好表内容向cell提供。